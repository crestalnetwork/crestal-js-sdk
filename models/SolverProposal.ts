/* tslint:disable */
/* eslint-disable */
/**
 * Crestal dashboard API - /crestal - OpenAPI 3.0
 * This is a crestal-dashboard-backend server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Proposal } from './Proposal';
import {
    ProposalFromJSON,
    ProposalFromJSONTyped,
    ProposalToJSON,
    ProposalToJSONTyped,
} from './Proposal';

/**
 * Will be deprecated in the future once solver development is complete.
 * @export
 * @interface SolverProposal
 */
export interface SolverProposal {
    /**
     * 
     * @type {Array<Proposal>}
     * @memberof SolverProposal
     */
    proposals?: Array<Proposal>;
    /**
     * Unique identifier (UUID) of the solver.
     * @type {string}
     * @memberof SolverProposal
     */
    solverUuid?: string;
    /**
     * Reputation score of the solver.
     * @type {number}
     * @memberof SolverProposal
     */
    solverReputation?: number;
}

/**
 * Check if a given object implements the SolverProposal interface.
 */
export function instanceOfSolverProposal(value: object): value is SolverProposal {
    return true;
}

export function SolverProposalFromJSON(json: any): SolverProposal {
    return SolverProposalFromJSONTyped(json, false);
}

export function SolverProposalFromJSONTyped(json: any, ignoreDiscriminator: boolean): SolverProposal {
    if (json == null) {
        return json;
    }
    return {
        
        'proposals': json['proposals'] == null ? undefined : ((json['proposals'] as Array<any>).map(ProposalFromJSON)),
        'solverUuid': json['solver_uuid'] == null ? undefined : json['solver_uuid'],
        'solverReputation': json['solver_reputation'] == null ? undefined : json['solver_reputation'],
    };
}

  export function SolverProposalToJSON(json: any): SolverProposal {
      return SolverProposalToJSONTyped(json, false);
  }

  export function SolverProposalToJSONTyped(value?: SolverProposal | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'proposals': value['proposals'] == null ? undefined : ((value['proposals'] as Array<any>).map(ProposalToJSON)),
        'solver_uuid': value['solverUuid'],
        'solver_reputation': value['solverReputation'],
    };
}

