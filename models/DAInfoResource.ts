/* tslint:disable */
/* eslint-disable */
/**
 * Crestal dashboard API - /crestal - OpenAPI 3.0
 * This is a crestal-dashboard-backend server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { State } from './State';
import {
    StateFromJSON,
    StateFromJSONTyped,
    StateToJSON,
    StateToJSONTyped,
} from './State';

/**
 * 
 * @export
 * @interface DAInfoResource
 */
export interface DAInfoResource {
    /**
     * sender identity
     * @type {string}
     * @memberof DAInfoResource
     */
    senderName?: string;
    /**
     * sender blockchain address in hex
     * @type {string}
     * @memberof DAInfoResource
     */
    senderAddress?: string;
    /**
     * average cost unit: USD
     * @type {number}
     * @memberof DAInfoResource
     */
    avgCost?: number;
    /**
     * block time in second
     * @type {number}
     * @memberof DAInfoResource
     */
    blockTime?: number;
    /**
     * no need to set this value, auto created by database
     * @type {string}
     * @memberof DAInfoResource
     */
    createdAt?: string;
    /**
     * block confirmation time in second
     * @type {number}
     * @memberof DAInfoResource
     */
    finalityTime?: number;
    /**
     * latency in second
     * @type {number}
     * @memberof DAInfoResource
     */
    latency?: number;
    /**
     * max throughput unit: mb/s
     * @type {number}
     * @memberof DAInfoResource
     */
    maxThroughput?: number;
    /**
     * The percentage of time the service is available
     * @type {number}
     * @memberof DAInfoResource
     */
    uptime?: number;
    /**
     * total transactions so far
     * @type {number}
     * @memberof DAInfoResource
     */
    totalTransactions?: number;
    /**
     * total blocks so far
     * @type {number}
     * @memberof DAInfoResource
     */
    totalBlocks?: number;
    /**
     * total gas so far
     * @type {number}
     * @memberof DAInfoResource
     */
    totalFee?: number;
    /**
     * total gas in usd
     * @type {number}
     * @memberof DAInfoResource
     */
    totalFeeUsd?: number;
    /**
     * total staked so far
     * @type {number}
     * @memberof DAInfoResource
     */
    totalStaked?: number;
    /**
     * total staked in usd
     * @type {number}
     * @memberof DAInfoResource
     */
    totalStakedUsd?: number;
    /**
     * the number of nodes so far
     * @type {number}
     * @memberof DAInfoResource
     */
    numberOfNodes?: number;
    /**
     * throughput in mb/s
     * @type {number}
     * @memberof DAInfoResource
     */
    throughput?: number;
    /**
     * node reliability
     * @type {number}
     * @memberof DAInfoResource
     */
    nodeReliability?: number;
    /**
     * the gas usd cost per transaction
     * @type {number}
     * @memberof DAInfoResource
     */
    costPerTransaction?: number;
    /**
     * the gas per transaction in gas token
     * @type {number}
     * @memberof DAInfoResource
     */
    gasPerTransaction?: number;
    /**
     * the gas usd cost per block
     * @type {number}
     * @memberof DAInfoResource
     */
    costPerBlock?: number;
    /**
     * the gas per block in gas token
     * @type {number}
     * @memberof DAInfoResource
     */
    gasPerBlock?: number;
    /**
     * the gas usd cost per mb
     * @type {number}
     * @memberof DAInfoResource
     */
    costPerMb?: number;
    /**
     * the gas per mb in gas token
     * @type {number}
     * @memberof DAInfoResource
     */
    gasPerMb?: number;
    /**
     * 
     * @type {number}
     * @memberof DAInfoResource
     */
    totalValueLocked?: number;
    /**
     * latency of sending one blob to network
     * @type {number}
     * @memberof DAInfoResource
     */
    sendBlobLatency?: number;
    /**
     * Get from explorer directly
     * @type {number}
     * @memberof DAInfoResource
     */
    totalDataTransacted?: number;
    /**
     * 
     * @type {State}
     * @memberof DAInfoResource
     */
    state?: State;
    /**
     * 
     * @type {number}
     * @memberof DAInfoResource
     */
    geoCoverage?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DAInfoResource
     */
    grantsAvailable?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DAInfoResource
     */
    numberOfProjects?: number;
    /**
     * sender node info
     * @type {object}
     * @memberof DAInfoResource
     */
    nodeInfo?: object;
    /**
     * DA name
     * @type {string}
     * @memberof DAInfoResource
     */
    daName?: string;
    /**
     * network type
     * @type {string}
     * @memberof DAInfoResource
     */
    networkType?: DAInfoResourceNetworkTypeEnum;
    /**
     * network name
     * @type {string}
     * @memberof DAInfoResource
     */
    network?: string;
    /**
     * gas token symbol
     * @type {string}
     * @memberof DAInfoResource
     */
    gasToken?: string;
    /**
     * explorer url
     * @type {string}
     * @memberof DAInfoResource
     */
    explorer?: string;
    /**
     * launch date in format xxxx-xx-xx
     * @type {string}
     * @memberof DAInfoResource
     */
    launchDate?: string;
    /**
     * consensus algorithm
     * @type {string}
     * @memberof DAInfoResource
     */
    consensusAlgorithm?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DAInfoResource
     */
    dataAvailabilitySampling?: boolean;
}


/**
 * @export
 */
export const DAInfoResourceNetworkTypeEnum = {
    Mainnet: 'Mainnet',
    Testnet: 'Testnet'
} as const;
export type DAInfoResourceNetworkTypeEnum = typeof DAInfoResourceNetworkTypeEnum[keyof typeof DAInfoResourceNetworkTypeEnum];


/**
 * Check if a given object implements the DAInfoResource interface.
 */
export function instanceOfDAInfoResource(value: object): value is DAInfoResource {
    return true;
}

export function DAInfoResourceFromJSON(json: any): DAInfoResource {
    return DAInfoResourceFromJSONTyped(json, false);
}

export function DAInfoResourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): DAInfoResource {
    if (json == null) {
        return json;
    }
    return {
        
        'senderName': json['sender_name'] == null ? undefined : json['sender_name'],
        'senderAddress': json['sender_address'] == null ? undefined : json['sender_address'],
        'avgCost': json['avg_cost'] == null ? undefined : json['avg_cost'],
        'blockTime': json['block_time'] == null ? undefined : json['block_time'],
        'createdAt': json['created_at'] == null ? undefined : json['created_at'],
        'finalityTime': json['finality_time'] == null ? undefined : json['finality_time'],
        'latency': json['latency'] == null ? undefined : json['latency'],
        'maxThroughput': json['max_throughput'] == null ? undefined : json['max_throughput'],
        'uptime': json['uptime'] == null ? undefined : json['uptime'],
        'totalTransactions': json['total_transactions'] == null ? undefined : json['total_transactions'],
        'totalBlocks': json['total_blocks'] == null ? undefined : json['total_blocks'],
        'totalFee': json['total_fee'] == null ? undefined : json['total_fee'],
        'totalFeeUsd': json['total_fee_usd'] == null ? undefined : json['total_fee_usd'],
        'totalStaked': json['total_staked'] == null ? undefined : json['total_staked'],
        'totalStakedUsd': json['total_staked_usd'] == null ? undefined : json['total_staked_usd'],
        'numberOfNodes': json['number_of_nodes'] == null ? undefined : json['number_of_nodes'],
        'throughput': json['throughput'] == null ? undefined : json['throughput'],
        'nodeReliability': json['node_reliability'] == null ? undefined : json['node_reliability'],
        'costPerTransaction': json['cost_per_transaction'] == null ? undefined : json['cost_per_transaction'],
        'gasPerTransaction': json['gas_per_transaction'] == null ? undefined : json['gas_per_transaction'],
        'costPerBlock': json['cost_per_block'] == null ? undefined : json['cost_per_block'],
        'gasPerBlock': json['gas_per_block'] == null ? undefined : json['gas_per_block'],
        'costPerMb': json['cost_per_mb'] == null ? undefined : json['cost_per_mb'],
        'gasPerMb': json['gas_per_mb'] == null ? undefined : json['gas_per_mb'],
        'totalValueLocked': json['total_value_locked'] == null ? undefined : json['total_value_locked'],
        'sendBlobLatency': json['send_blob_latency'] == null ? undefined : json['send_blob_latency'],
        'totalDataTransacted': json['total_data_transacted'] == null ? undefined : json['total_data_transacted'],
        'state': json['state'] == null ? undefined : StateFromJSON(json['state']),
        'geoCoverage': json['geo_coverage'] == null ? undefined : json['geo_coverage'],
        'grantsAvailable': json['grants_available'] == null ? undefined : json['grants_available'],
        'numberOfProjects': json['number_of_projects'] == null ? undefined : json['number_of_projects'],
        'nodeInfo': json['node_info'] == null ? undefined : json['node_info'],
        'daName': json['da_name'] == null ? undefined : json['da_name'],
        'networkType': json['network_type'] == null ? undefined : json['network_type'],
        'network': json['network'] == null ? undefined : json['network'],
        'gasToken': json['gas_token'] == null ? undefined : json['gas_token'],
        'explorer': json['explorer'] == null ? undefined : json['explorer'],
        'launchDate': json['launch_date'] == null ? undefined : json['launch_date'],
        'consensusAlgorithm': json['consensus_algorithm'] == null ? undefined : json['consensus_algorithm'],
        'dataAvailabilitySampling': json['data_availability_sampling'] == null ? undefined : json['data_availability_sampling'],
    };
}

  export function DAInfoResourceToJSON(json: any): DAInfoResource {
      return DAInfoResourceToJSONTyped(json, false);
  }

  export function DAInfoResourceToJSONTyped(value?: DAInfoResource | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sender_name': value['senderName'],
        'sender_address': value['senderAddress'],
        'avg_cost': value['avgCost'],
        'block_time': value['blockTime'],
        'created_at': value['createdAt'],
        'finality_time': value['finalityTime'],
        'latency': value['latency'],
        'max_throughput': value['maxThroughput'],
        'uptime': value['uptime'],
        'total_transactions': value['totalTransactions'],
        'total_blocks': value['totalBlocks'],
        'total_fee': value['totalFee'],
        'total_fee_usd': value['totalFeeUsd'],
        'total_staked': value['totalStaked'],
        'total_staked_usd': value['totalStakedUsd'],
        'number_of_nodes': value['numberOfNodes'],
        'throughput': value['throughput'],
        'node_reliability': value['nodeReliability'],
        'cost_per_transaction': value['costPerTransaction'],
        'gas_per_transaction': value['gasPerTransaction'],
        'cost_per_block': value['costPerBlock'],
        'gas_per_block': value['gasPerBlock'],
        'cost_per_mb': value['costPerMb'],
        'gas_per_mb': value['gasPerMb'],
        'total_value_locked': value['totalValueLocked'],
        'send_blob_latency': value['sendBlobLatency'],
        'total_data_transacted': value['totalDataTransacted'],
        'state': StateToJSON(value['state']),
        'geo_coverage': value['geoCoverage'],
        'grants_available': value['grantsAvailable'],
        'number_of_projects': value['numberOfProjects'],
        'node_info': value['nodeInfo'],
        'da_name': value['daName'],
        'network_type': value['networkType'],
        'network': value['network'],
        'gas_token': value['gasToken'],
        'explorer': value['explorer'],
        'launch_date': value['launchDate'],
        'consensus_algorithm': value['consensusAlgorithm'],
        'data_availability_sampling': value['dataAvailabilitySampling'],
    };
}

