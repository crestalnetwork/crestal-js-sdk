/* tslint:disable */
/* eslint-disable */
/**
 * Crestal dashboard API - /crestal - OpenAPI 3.0
 * This is a crestal-dashboard-backend server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Solver } from './Solver';
import {
    SolverFromJSON,
    SolverFromJSONTyped,
    SolverToJSON,
    SolverToJSONTyped,
} from './Solver';
import type { Worker } from './Worker';
import {
    WorkerFromJSON,
    WorkerFromJSONTyped,
    WorkerToJSON,
    WorkerToJSONTyped,
} from './Worker';

/**
 * 
 * @export
 * @interface ProjectResource
 */
export interface ProjectResource {
    /**
     * Project ID obtained from the blueprint smart contract.
     * @type {string}
     * @memberof ProjectResource
     */
    id: string;
    /**
     * On-chain proposal request ID.
     * @type {string}
     * @memberof ProjectResource
     */
    proposalRequestId?: string;
    /**
     * On-chain deployment request ID.
     * @type {string}
     * @memberof ProjectResource
     */
    deploymentRequestId?: string;
    /**
     * Project name.
     * @type {string}
     * @memberof ProjectResource
     */
    name: string;
    /**
     * User's blockchain address in hexadecimal format.
     * @type {string}
     * @memberof ProjectResource
     */
    userAddress: string;
    /**
     * Target performance obtained from chatbot interaction.
     * @type {number}
     * @memberof ProjectResource
     */
    targetPerformance?: number;
    /**
     * Pay amount specified in the payment page.
     * @type {number}
     * @memberof ProjectResource
     */
    payAmount?: number;
    /**
     * Status of the project.
     * @type {string}
     * @memberof ProjectResource
     */
    status?: ProjectResourceStatusEnum;
    /**
     * Name of the Data Availability (DA) solution.
     * @type {string}
     * @memberof ProjectResource
     */
    daName?: string;
    /**
     * Cost in USD.
     * @type {number}
     * @memberof ProjectResource
     */
    cost?: number;
    /**
     * Unique identifier (UUID) of the solver.
     * @type {string}
     * @memberof ProjectResource
     */
    solverUuid?: string;
    /**
     * Proposal ID provided by the solver.
     * @type {number}
     * @memberof ProjectResource
     */
    proposalId?: number;
    /**
     * List of worker UUIDs separated by commas.
     * @type {string}
     * @memberof ProjectResource
     */
    workersUuid?: string;
    /**
     * Deployer ID assigned by the worker.
     * @type {number}
     * @memberof ProjectResource
     */
    deploymentId?: number;
    /**
     * Point of presence, as specified by the frontend.
     * @type {string}
     * @memberof ProjectResource
     */
    pop?: string;
    /**
     * Parameters for recommendation provided by the smart contract.
     * @type {object}
     * @memberof ProjectResource
     */
    recommendationParam?: object;
    /**
     * 
     * @type {Solver}
     * @memberof ProjectResource
     */
    proposedSolver?: Solver;
    /**
     * If `workers_uuid` is provided, returns an array of workers; otherwise, returns a single worker.
     * @type {Array<Worker>}
     * @memberof ProjectResource
     */
    deployedWorkers?: Array<Worker>;
}


/**
 * @export
 */
export const ProjectResourceStatusEnum = {
    Draft: 'draft',
    WaitingProposal: 'waiting_proposal',
    SettingProposal: 'setting_proposal',
    SettingPay: 'setting_pay',
    WaitingDeployment: 'waiting_deployment',
    Deploying: 'deploying',
    Live: 'live',
    Terminated: 'terminated'
} as const;
export type ProjectResourceStatusEnum = typeof ProjectResourceStatusEnum[keyof typeof ProjectResourceStatusEnum];


/**
 * Check if a given object implements the ProjectResource interface.
 */
export function instanceOfProjectResource(value: object): value is ProjectResource {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('userAddress' in value) || value['userAddress'] === undefined) return false;
    return true;
}

export function ProjectResourceFromJSON(json: any): ProjectResource {
    return ProjectResourceFromJSONTyped(json, false);
}

export function ProjectResourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectResource {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'proposalRequestId': json['proposal_request_id'] == null ? undefined : json['proposal_request_id'],
        'deploymentRequestId': json['deployment_request_id'] == null ? undefined : json['deployment_request_id'],
        'name': json['name'],
        'userAddress': json['user_address'],
        'targetPerformance': json['target_performance'] == null ? undefined : json['target_performance'],
        'payAmount': json['pay_amount'] == null ? undefined : json['pay_amount'],
        'status': json['status'] == null ? undefined : json['status'],
        'daName': json['da_name'] == null ? undefined : json['da_name'],
        'cost': json['cost'] == null ? undefined : json['cost'],
        'solverUuid': json['solver_uuid'] == null ? undefined : json['solver_uuid'],
        'proposalId': json['proposal_id'] == null ? undefined : json['proposal_id'],
        'workersUuid': json['workers_uuid'] == null ? undefined : json['workers_uuid'],
        'deploymentId': json['deployment_id'] == null ? undefined : json['deployment_id'],
        'pop': json['pop'] == null ? undefined : json['pop'],
        'recommendationParam': json['recommendation_param'] == null ? undefined : json['recommendation_param'],
        'proposedSolver': json['proposed_solver'] == null ? undefined : SolverFromJSON(json['proposed_solver']),
        'deployedWorkers': json['deployed_workers'] == null ? undefined : ((json['deployed_workers'] as Array<any>).map(WorkerFromJSON)),
    };
}

  export function ProjectResourceToJSON(json: any): ProjectResource {
      return ProjectResourceToJSONTyped(json, false);
  }

  export function ProjectResourceToJSONTyped(value?: ProjectResource | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'proposal_request_id': value['proposalRequestId'],
        'deployment_request_id': value['deploymentRequestId'],
        'name': value['name'],
        'user_address': value['userAddress'],
        'target_performance': value['targetPerformance'],
        'pay_amount': value['payAmount'],
        'status': value['status'],
        'da_name': value['daName'],
        'cost': value['cost'],
        'solver_uuid': value['solverUuid'],
        'proposal_id': value['proposalId'],
        'workers_uuid': value['workersUuid'],
        'deployment_id': value['deploymentId'],
        'pop': value['pop'],
        'recommendation_param': value['recommendationParam'],
        'proposed_solver': SolverToJSON(value['proposedSolver']),
        'deployed_workers': value['deployedWorkers'] == null ? undefined : ((value['deployedWorkers'] as Array<any>).map(WorkerToJSON)),
    };
}

