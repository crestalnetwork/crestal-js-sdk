/* tslint:disable */
/* eslint-disable */
/**
 * Crestal dashboard API - /crestal - OpenAPI 3.0
 * This is a crestal-dashboard-backend server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Proposal } from './Proposal';
import {
    ProposalFromJSON,
    ProposalFromJSONTyped,
    ProposalToJSON,
    ProposalToJSONTyped,
} from './Proposal';

/**
 * 
 * @export
 * @interface Deployment
 */
export interface Deployment {
    /**
     * Unique deployment identifier.
     * @type {number}
     * @memberof Deployment
     */
    id?: number;
    /**
     * Hexadecimal request ID from the blockchain.
     * @type {string}
     * @memberof Deployment
     */
    requestId?: string;
    /**
     * User's blockchain address in hexadecimal format.
     * @type {string}
     * @memberof Deployment
     */
    userAddress: string;
    /**
     * Name of the worker handling the deployment.
     * @type {string}
     * @memberof Deployment
     */
    workerName?: string;
    /**
     * Unique identifier (UUID) of the worker.
     * @type {string}
     * @memberof Deployment
     */
    workerUuid?: string;
    /**
     * SHA-256 hash of the proposal.
     * @type {string}
     * @memberof Deployment
     */
    proposalHash?: string;
    /**
     * Unique identifier for the proposal.
     * @type {number}
     * @memberof Deployment
     */
    proposalId: number;
    /**
     * Deployment details in JSON format.
     * @type {object}
     * @memberof Deployment
     */
    deploymentDetails?: object;
    /**
     * 
     * @type {Proposal}
     * @memberof Deployment
     */
    proposal?: Proposal;
    /**
     * Deployment status.
     * @type {string}
     * @memberof Deployment
     */
    status?: DeploymentStatusEnum;
}


/**
 * @export
 */
export const DeploymentStatusEnum = {
    Init: 'init',
    PickUp: 'pick_up',
    Deploying: 'deploying',
    Deployed: 'deployed',
    GeneratedProof: 'generated_proof'
} as const;
export type DeploymentStatusEnum = typeof DeploymentStatusEnum[keyof typeof DeploymentStatusEnum];


/**
 * Check if a given object implements the Deployment interface.
 */
export function instanceOfDeployment(value: object): value is Deployment {
    if (!('userAddress' in value) || value['userAddress'] === undefined) return false;
    if (!('proposalId' in value) || value['proposalId'] === undefined) return false;
    return true;
}

export function DeploymentFromJSON(json: any): Deployment {
    return DeploymentFromJSONTyped(json, false);
}

export function DeploymentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Deployment {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'requestId': json['request_id'] == null ? undefined : json['request_id'],
        'userAddress': json['user_address'],
        'workerName': json['worker_name'] == null ? undefined : json['worker_name'],
        'workerUuid': json['worker_uuid'] == null ? undefined : json['worker_uuid'],
        'proposalHash': json['proposal_hash'] == null ? undefined : json['proposal_hash'],
        'proposalId': json['proposal_id'],
        'deploymentDetails': json['deployment_details'] == null ? undefined : json['deployment_details'],
        'proposal': json['proposal'] == null ? undefined : ProposalFromJSON(json['proposal']),
        'status': json['status'] == null ? undefined : json['status'],
    };
}

  export function DeploymentToJSON(json: any): Deployment {
      return DeploymentToJSONTyped(json, false);
  }

  export function DeploymentToJSONTyped(value?: Deployment | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'request_id': value['requestId'],
        'user_address': value['userAddress'],
        'worker_name': value['workerName'],
        'worker_uuid': value['workerUuid'],
        'proposal_hash': value['proposalHash'],
        'proposal_id': value['proposalId'],
        'deployment_details': value['deploymentDetails'],
        'proposal': ProposalToJSON(value['proposal']),
        'status': value['status'],
    };
}

