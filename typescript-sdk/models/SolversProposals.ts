/* tslint:disable */
/* eslint-disable */
/**
 * Crestal dashboard API - /crestal - OpenAPI 3.0
 * This is a crestal-dashboard-backend server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SolversProposal } from './SolversProposal';
import {
    SolversProposalFromJSON,
    SolversProposalFromJSONTyped,
    SolversProposalToJSON,
    SolversProposalToJSONTyped,
} from './SolversProposal';

/**
 * 
 * @export
 * @interface SolversProposals
 */
export interface SolversProposals {
    /**
     * 
     * @type {Array<SolversProposal>}
     * @memberof SolversProposals
     */
    proposals?: Array<SolversProposal>;
    /**
     * Solver's blockchain address in hexadecimal format.
     * @type {string}
     * @memberof SolversProposals
     */
    solverAddress?: string;
    /**
     * Reputation score of the solver.
     * @type {number}
     * @memberof SolversProposals
     */
    solverReputation?: number;
    /**
     * Unique request ID.
     * @type {string}
     * @memberof SolversProposals
     */
    requestId?: string;
}

/**
 * Check if a given object implements the SolversProposals interface.
 */
export function instanceOfSolversProposals(value: object): value is SolversProposals {
    return true;
}

export function SolversProposalsFromJSON(json: any): SolversProposals {
    return SolversProposalsFromJSONTyped(json, false);
}

export function SolversProposalsFromJSONTyped(json: any, ignoreDiscriminator: boolean): SolversProposals {
    if (json == null) {
        return json;
    }
    return {
        
        'proposals': json['proposals'] == null ? undefined : ((json['proposals'] as Array<any>).map(SolversProposalFromJSON)),
        'solverAddress': json['solver_address'] == null ? undefined : json['solver_address'],
        'solverReputation': json['solver_reputation'] == null ? undefined : json['solver_reputation'],
        'requestId': json['request_id'] == null ? undefined : json['request_id'],
    };
}

  export function SolversProposalsToJSON(json: any): SolversProposals {
      return SolversProposalsToJSONTyped(json, false);
  }

  export function SolversProposalsToJSONTyped(value?: SolversProposals | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'proposals': value['proposals'] == null ? undefined : ((value['proposals'] as Array<any>).map(SolversProposalToJSON)),
        'solver_address': value['solverAddress'],
        'solver_reputation': value['solverReputation'],
        'request_id': value['requestId'],
    };
}

