/* tslint:disable */
/* eslint-disable */
/**
 * Crestal dashboard API - /crestal - OpenAPI 3.0
 * This is a crestal-dashboard-backend server.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { StateFromJSON, StateToJSON, } from './State';
/**
 * Check if a given object implements the DAInfo interface.
 */
export function instanceOfDAInfo(value) {
    return true;
}
export function DAInfoFromJSON(json) {
    return DAInfoFromJSONTyped(json, false);
}
export function DAInfoFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'senderName': json['sender_name'] == null ? undefined : json['sender_name'],
        'senderAddress': json['sender_address'] == null ? undefined : json['sender_address'],
        'avgCost': json['avg_cost'] == null ? undefined : json['avg_cost'],
        'blockTime': json['block_time'] == null ? undefined : json['block_time'],
        'createdAt': json['created_at'] == null ? undefined : json['created_at'],
        'finalityTime': json['finality_time'] == null ? undefined : json['finality_time'],
        'latency': json['latency'] == null ? undefined : json['latency'],
        'maxThroughput': json['max_throughput'] == null ? undefined : json['max_throughput'],
        'uptime': json['uptime'] == null ? undefined : json['uptime'],
        'totalTransactions': json['total_transactions'] == null ? undefined : json['total_transactions'],
        'totalBlocks': json['total_blocks'] == null ? undefined : json['total_blocks'],
        'totalFee': json['total_fee'] == null ? undefined : json['total_fee'],
        'totalFeeUsd': json['total_fee_usd'] == null ? undefined : json['total_fee_usd'],
        'totalStaked': json['total_staked'] == null ? undefined : json['total_staked'],
        'totalStakedUsd': json['total_staked_usd'] == null ? undefined : json['total_staked_usd'],
        'numberOfNodes': json['number_of_nodes'] == null ? undefined : json['number_of_nodes'],
        'throughput': json['throughput'] == null ? undefined : json['throughput'],
        'nodeReliability': json['node_reliability'] == null ? undefined : json['node_reliability'],
        'costPerTransaction': json['cost_per_transaction'] == null ? undefined : json['cost_per_transaction'],
        'gasPerTransaction': json['gas_per_transaction'] == null ? undefined : json['gas_per_transaction'],
        'costPerBlock': json['cost_per_block'] == null ? undefined : json['cost_per_block'],
        'gasPerBlock': json['gas_per_block'] == null ? undefined : json['gas_per_block'],
        'costPerMb': json['cost_per_mb'] == null ? undefined : json['cost_per_mb'],
        'gasPerMb': json['gas_per_mb'] == null ? undefined : json['gas_per_mb'],
        'totalValueLocked': json['total_value_locked'] == null ? undefined : json['total_value_locked'],
        'sendBlobLatency': json['send_blob_latency'] == null ? undefined : json['send_blob_latency'],
        'totalDataTransacted': json['total_data_transacted'] == null ? undefined : json['total_data_transacted'],
        'state': json['state'] == null ? undefined : StateFromJSON(json['state']),
        'geoCoverage': json['geo_coverage'] == null ? undefined : json['geo_coverage'],
        'grantsAvailable': json['grants_available'] == null ? undefined : json['grants_available'],
        'numberOfProjects': json['number_of_projects'] == null ? undefined : json['number_of_projects'],
        'nodeInfo': json['node_info'] == null ? undefined : json['node_info'],
    };
}
export function DAInfoToJSON(json) {
    return DAInfoToJSONTyped(json, false);
}
export function DAInfoToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'sender_name': value['senderName'],
        'sender_address': value['senderAddress'],
        'avg_cost': value['avgCost'],
        'block_time': value['blockTime'],
        'created_at': value['createdAt'],
        'finality_time': value['finalityTime'],
        'latency': value['latency'],
        'max_throughput': value['maxThroughput'],
        'uptime': value['uptime'],
        'total_transactions': value['totalTransactions'],
        'total_blocks': value['totalBlocks'],
        'total_fee': value['totalFee'],
        'total_fee_usd': value['totalFeeUsd'],
        'total_staked': value['totalStaked'],
        'total_staked_usd': value['totalStakedUsd'],
        'number_of_nodes': value['numberOfNodes'],
        'throughput': value['throughput'],
        'node_reliability': value['nodeReliability'],
        'cost_per_transaction': value['costPerTransaction'],
        'gas_per_transaction': value['gasPerTransaction'],
        'cost_per_block': value['costPerBlock'],
        'gas_per_block': value['gasPerBlock'],
        'cost_per_mb': value['costPerMb'],
        'gas_per_mb': value['gasPerMb'],
        'total_value_locked': value['totalValueLocked'],
        'send_blob_latency': value['sendBlobLatency'],
        'total_data_transacted': value['totalDataTransacted'],
        'state': StateToJSON(value['state']),
        'geo_coverage': value['geoCoverage'],
        'grants_available': value['grantsAvailable'],
        'number_of_projects': value['numberOfProjects'],
        'node_info': value['nodeInfo'],
    };
}
