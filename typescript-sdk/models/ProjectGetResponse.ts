/* tslint:disable */
/* eslint-disable */
/**
 * Crestal dashboard API - /crestal - OpenAPI 3.0
 * This is a crestal-dashboard-backend server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Solver } from './Solver';
import {
    SolverFromJSON,
    SolverFromJSONTyped,
    SolverToJSON,
    SolverToJSONTyped,
} from './Solver';
import type { Worker } from './Worker';
import {
    WorkerFromJSON,
    WorkerFromJSONTyped,
    WorkerToJSON,
    WorkerToJSONTyped,
} from './Worker';

/**
 * 
 * @export
 * @interface ProjectGetResponse
 */
export interface ProjectGetResponse {
    /**
     * 
     * @type {Solver}
     * @memberof ProjectGetResponse
     */
    proposedSolver?: Solver;
    /**
     * If `workers_uuid` is provided, returns an array of workers; otherwise, returns a single worker.
     * @type {Array<Worker>}
     * @memberof ProjectGetResponse
     */
    deployedWorkers?: Array<Worker>;
}

/**
 * Check if a given object implements the ProjectGetResponse interface.
 */
export function instanceOfProjectGetResponse(value: object): value is ProjectGetResponse {
    return true;
}

export function ProjectGetResponseFromJSON(json: any): ProjectGetResponse {
    return ProjectGetResponseFromJSONTyped(json, false);
}

export function ProjectGetResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectGetResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'proposedSolver': json['proposed_solver'] == null ? undefined : SolverFromJSON(json['proposed_solver']),
        'deployedWorkers': json['deployed_workers'] == null ? undefined : ((json['deployed_workers'] as Array<any>).map(WorkerFromJSON)),
    };
}

  export function ProjectGetResponseToJSON(json: any): ProjectGetResponse {
      return ProjectGetResponseToJSONTyped(json, false);
  }

  export function ProjectGetResponseToJSONTyped(value?: ProjectGetResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'proposed_solver': SolverToJSON(value['proposedSolver']),
        'deployed_workers': value['deployedWorkers'] == null ? undefined : ((value['deployedWorkers'] as Array<any>).map(WorkerToJSON)),
    };
}

