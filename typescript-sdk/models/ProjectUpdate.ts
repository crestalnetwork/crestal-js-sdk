/* tslint:disable */
/* eslint-disable */
/**
 * Crestal dashboard API - /crestal - OpenAPI 3.0
 * This is a crestal-dashboard-backend server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProjectUpdate
 */
export interface ProjectUpdate {
    /**
     * Project ID obtained from the blueprint smart contract.
     * @type {string}
     * @memberof ProjectUpdate
     */
    id: string;
    /**
     * On-chain proposal request ID.
     * @type {string}
     * @memberof ProjectUpdate
     */
    proposalRequestId?: string;
    /**
     * On-chain deployment request ID.
     * @type {string}
     * @memberof ProjectUpdate
     */
    deploymentRequestId?: string;
    /**
     * Project name.
     * @type {string}
     * @memberof ProjectUpdate
     */
    name: string;
    /**
     * User's blockchain address in hexadecimal format.
     * @type {string}
     * @memberof ProjectUpdate
     */
    userAddress: string;
    /**
     * Target performance obtained from chatbot interaction.
     * @type {number}
     * @memberof ProjectUpdate
     */
    targetPerformance?: number;
    /**
     * Pay amount specified in the payment page.
     * @type {number}
     * @memberof ProjectUpdate
     */
    payAmount?: number;
    /**
     * Status of the project.
     * @type {string}
     * @memberof ProjectUpdate
     */
    status?: ProjectUpdateStatusEnum;
    /**
     * Name of the Data Availability (DA) solution.
     * @type {string}
     * @memberof ProjectUpdate
     */
    daName?: string;
    /**
     * Cost in USD.
     * @type {number}
     * @memberof ProjectUpdate
     */
    cost?: number;
    /**
     * Unique identifier (UUID) of the solver.
     * @type {string}
     * @memberof ProjectUpdate
     */
    solverUuid?: string;
    /**
     * Proposal ID provided by the solver.
     * @type {number}
     * @memberof ProjectUpdate
     */
    proposalId?: number;
    /**
     * List of worker UUIDs separated by commas.
     * @type {string}
     * @memberof ProjectUpdate
     */
    workersUuid?: string;
    /**
     * Deployer ID assigned by the worker.
     * @type {number}
     * @memberof ProjectUpdate
     */
    deploymentId?: number;
    /**
     * Point of presence, as specified by the frontend.
     * @type {string}
     * @memberof ProjectUpdate
     */
    pop?: string;
    /**
     * Parameters for recommendation provided by the smart contract.
     * @type {object}
     * @memberof ProjectUpdate
     */
    recommendationParam?: object;
}


/**
 * @export
 */
export const ProjectUpdateStatusEnum = {
    Draft: 'draft',
    WaitingProposal: 'waiting_proposal',
    SettingProposal: 'setting_proposal',
    SettingPay: 'setting_pay',
    WaitingDeployment: 'waiting_deployment',
    Deploying: 'deploying',
    Live: 'live',
    Terminated: 'terminated'
} as const;
export type ProjectUpdateStatusEnum = typeof ProjectUpdateStatusEnum[keyof typeof ProjectUpdateStatusEnum];


/**
 * Check if a given object implements the ProjectUpdate interface.
 */
export function instanceOfProjectUpdate(value: object): value is ProjectUpdate {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('userAddress' in value) || value['userAddress'] === undefined) return false;
    return true;
}

export function ProjectUpdateFromJSON(json: any): ProjectUpdate {
    return ProjectUpdateFromJSONTyped(json, false);
}

export function ProjectUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectUpdate {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'proposalRequestId': json['proposal_request_id'] == null ? undefined : json['proposal_request_id'],
        'deploymentRequestId': json['deployment_request_id'] == null ? undefined : json['deployment_request_id'],
        'name': json['name'],
        'userAddress': json['user_address'],
        'targetPerformance': json['target_performance'] == null ? undefined : json['target_performance'],
        'payAmount': json['pay_amount'] == null ? undefined : json['pay_amount'],
        'status': json['status'] == null ? undefined : json['status'],
        'daName': json['da_name'] == null ? undefined : json['da_name'],
        'cost': json['cost'] == null ? undefined : json['cost'],
        'solverUuid': json['solver_uuid'] == null ? undefined : json['solver_uuid'],
        'proposalId': json['proposal_id'] == null ? undefined : json['proposal_id'],
        'workersUuid': json['workers_uuid'] == null ? undefined : json['workers_uuid'],
        'deploymentId': json['deployment_id'] == null ? undefined : json['deployment_id'],
        'pop': json['pop'] == null ? undefined : json['pop'],
        'recommendationParam': json['recommendation_param'] == null ? undefined : json['recommendation_param'],
    };
}

  export function ProjectUpdateToJSON(json: any): ProjectUpdate {
      return ProjectUpdateToJSONTyped(json, false);
  }

  export function ProjectUpdateToJSONTyped(value?: ProjectUpdate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'proposal_request_id': value['proposalRequestId'],
        'deployment_request_id': value['deploymentRequestId'],
        'name': value['name'],
        'user_address': value['userAddress'],
        'target_performance': value['targetPerformance'],
        'pay_amount': value['payAmount'],
        'status': value['status'],
        'da_name': value['daName'],
        'cost': value['cost'],
        'solver_uuid': value['solverUuid'],
        'proposal_id': value['proposalId'],
        'workers_uuid': value['workersUuid'],
        'deployment_id': value['deploymentId'],
        'pop': value['pop'],
        'recommendation_param': value['recommendationParam'],
    };
}

