/* tslint:disable */
/* eslint-disable */
/**
 * Crestal dashboard API - /crestal - OpenAPI 3.0
 * This is a crestal-dashboard-backend server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DAProposal
 */
export interface DAProposal {
    /**
     * Initial cost to deploy this proposal.
     * @type {number}
     * @memberof DAProposal
     */
    initCost?: number;
    /**
     * Maintenance cost for this proposal.
     * @type {number}
     * @memberof DAProposal
     */
    maintenanceCost?: number;
    /**
     * Payment period for the proposal.
     * @type {number}
     * @memberof DAProposal
     */
    payPeriod?: number;
    /**
     * Currency accepted for payment.
     * @type {string}
     * @memberof DAProposal
     */
    acceptCurrency?: string;
    /**
     * Cost in USD.
     * @type {number}
     * @memberof DAProposal
     */
    cost?: number;
    /**
     * Fit score of the proposal.
     * @type {number}
     * @memberof DAProposal
     */
    fit?: number;
    /**
     * Throughput in megabytes per second.
     * @type {number}
     * @memberof DAProposal
     */
    throughput?: number;
    /**
     * Uptime in seconds.
     * @type {number}
     * @memberof DAProposal
     */
    sla?: number;
    /**
     * Proposal error rate.
     * @type {number}
     * @memberof DAProposal
     */
    errorRate?: number;
    /**
     * Rank of the proposal.
     * @type {number}
     * @memberof DAProposal
     */
    rank?: number;
    /**
     * Additional attributes of the proposal, including setup details.
     * @type {object}
     * @memberof DAProposal
     */
    extraAttribute?: object;
}

/**
 * Check if a given object implements the DAProposal interface.
 */
export function instanceOfDAProposal(value: object): value is DAProposal {
    return true;
}

export function DAProposalFromJSON(json: any): DAProposal {
    return DAProposalFromJSONTyped(json, false);
}

export function DAProposalFromJSONTyped(json: any, ignoreDiscriminator: boolean): DAProposal {
    if (json == null) {
        return json;
    }
    return {
        
        'initCost': json['init_cost'] == null ? undefined : json['init_cost'],
        'maintenanceCost': json['maintenance_cost'] == null ? undefined : json['maintenance_cost'],
        'payPeriod': json['pay_period'] == null ? undefined : json['pay_period'],
        'acceptCurrency': json['accept_currency'] == null ? undefined : json['accept_currency'],
        'cost': json['cost'] == null ? undefined : json['cost'],
        'fit': json['fit'] == null ? undefined : json['fit'],
        'throughput': json['throughput'] == null ? undefined : json['throughput'],
        'sla': json['sla'] == null ? undefined : json['sla'],
        'errorRate': json['error_rate'] == null ? undefined : json['error_rate'],
        'rank': json['rank'] == null ? undefined : json['rank'],
        'extraAttribute': json['extra_attribute'] == null ? undefined : json['extra_attribute'],
    };
}

  export function DAProposalToJSON(json: any): DAProposal {
      return DAProposalToJSONTyped(json, false);
  }

  export function DAProposalToJSONTyped(value?: DAProposal | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'init_cost': value['initCost'],
        'maintenance_cost': value['maintenanceCost'],
        'pay_period': value['payPeriod'],
        'accept_currency': value['acceptCurrency'],
        'cost': value['cost'],
        'fit': value['fit'],
        'throughput': value['throughput'],
        'sla': value['sla'],
        'error_rate': value['errorRate'],
        'rank': value['rank'],
        'extra_attribute': value['extraAttribute'],
    };
}

